#!/usr/bin/env ruby

require 'optparse'

require_relative "../lib/gotasku"

def get_help
  puts "\"gotasku #{ARGV.join(" ")}\" isn't a command I know."
  puts "Try `gotasku --help`"
end

def problem(options)
  Gotasku::Problem.new(options)
end

def prompt(text)
	print(text)
	$stdin.gets.chomp.strip
end

problem_commands = %w[ display sgf id save data difficulty 
                       rating type ]
session_commands = %w[ login ]

options = {}
optparse = OptionParser.new do |opts|

	options["id"] = nil 
	opts.on( '-i', '--id Num', Integer, "Provide the problem id" ) do |id|
		  options["id"] = id 
	end

  options["sgf"] = nil 
	opts.on( '-s', '--sgf [String][FILE]', 
					"Provide the problem SGF" ) do |sgf|
		  options["sgf"] = sgf 
	end

  options[:username] = nil 
	opts.on( '-u', '--username Username', 
					"Provide your Username" ) do |username|
		  options[:username] = username 
	end
	
  options[:password] = nil 
	opts.on( '-p', '--password Password', 
					"Provide your Password" ) do |password|
		  options[:password] = password 
	end
end

optparse.parse!

# if multiple commands are given
if ARGV.length > 1
	get_help
	exit
end

if session_commands.include?(ARGV[0])
	options[:username] ||= prompt("Username: ")
	options[:password] ||= prompt("Password: ")

	user = Gotasku::User.new(options[:username], options[:password])
	p Gotasku::Session.new(user)
elsif problem_commands.include?(ARGV[0])
	p problem(options).send(ARGV[0].to_sym)
elsif ARGV[0].nil?
	p problem(options)
else
	get_help
end
